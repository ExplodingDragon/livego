<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>在线直播</title>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            height: 100%;
            overflow: hidden;
        }
        #video-container {
            position: relative;
            width: 100%;
            height: 100%;
            background-color: black;
        }
        video {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        #controls {
            position: absolute;
            top: 10px;
            right: 10px;
            color: white;
            background-color: rgba(0, 0, 0, 0.7);
            padding: 10px;
            border-radius: 5px;
            transition: opacity 0.5s;
            opacity: 1;
        }
        #controls.hidden {
            opacity: 0;
            pointer-events: none;
        }
        #live-status {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 24px;
            display: none;
        }
    </style>
</head>
<body>
<div id="video-container">
    <video id="video" controls></video>
    <div id="live-status">未开始直播</div>
    <div id="controls">
        <label for="source-select">房间: </label><select id="source-select">
            {{ range $key, $value := .rooms }}
                <option value="/hls/{{ $key }}/live.m3u8">{{ $key }}</option>
            {{ end }}
            <option value="https://test-streams.mux.dev/x36xhzz/x36xhzz.m3u8">测试源</option>
        </select>
        <label for="hls_url"></label><input id="hls_url" type="text" readonly>
        <button onclick="copy('hls_url')">复制</button>
    </div>
</div>

<script src="/js/hls.min.js"></script>
<script>
    const video = document.getElementById('video');
    const liveStatus = document.getElementById('live-status');
    const sourceSelect = document.getElementById('source-select');
    const controls = document.getElementById('controls');
    const hlsUrl = document.getElementById('hls_url');

    let hls;
    let hideControlsTimeout;

    function loadVideo(src) {
        if (src.startsWith('/')) {
            src = window.location.origin + src;
        }
        hlsUrl.value = src;
        if (Hls.isSupported()) {
            if (hls) {
                hls.destroy();
            }
            hls = new Hls();
            hls.loadSource(src);
            hls.attachMedia(video);
            hls.on(Hls.Events.MANIFEST_PARSED, function () {
                video.play();
                liveStatus.style.display = 'none';
            });
            hls.on(Hls.Events.ERROR, function (event, data) {
                if (data.fatal) {
                    liveStatus.style.display = 'block';
                }
            });
        } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
            video.src = src;
            video.addEventListener('loadedmetadata', function () {
                video.play();
                liveStatus.style.display = 'none';
            });
        } else {
            liveStatus.style.display = 'block';
        }
    }

    sourceSelect.addEventListener('change', () => {
        const selectedSource = sourceSelect.value;
        loadVideo(selectedSource);
    });

    video.addEventListener('mousemove', () => {
        controls.classList.remove('hidden');
        clearTimeout(hideControlsTimeout);
        hideControlsTimeout = setTimeout(() => {
            controls.classList.add('hidden');
        }, 3000);
    });
    function copy(id) {
        let fff = document.getElementById(id)
        fff.select();
        navigator.clipboard.writeText(fff.value);
    }
    // Load the first source by default
    loadVideo(sourceSelect.value);

</script>
</body>
</html>